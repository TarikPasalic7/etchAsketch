{"version":3,"sources":["App.js","index.js"],"names":["App","useState","gridNumber","setGridNumber","boxColor","setBoxColor","boxElements","addBoxElements","noEvenet","setNoEvent","useEffect","elements","divContainer","document","getElementsByClassName","style","gridTemplateRows","gridTemplateColumns","i","obj","push","console","log","clear","tempElements","map","data","index","isEntered","divBox","length","backgroundColor","changeBox","e","newArr","target","newColor","Math","floor","random","className","onClick","val","prompt","onMouseEnter","id","ReactDOM","render","getElementById"],"mappings":"4NA8IeA,MAxIf,WACE,MAAiCC,mBAAS,IAA1C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA6BF,mBAAS,SAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAmCJ,mBAAS,IAA5C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4BN,oBAAS,GAArC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRH,EAAe,IACfF,EAAY,SACZ,IAAIM,EAAS,GACTC,EAAaC,SAASC,uBAAuB,aAAa,GAC9DF,EAAaG,MAAMC,iBAAnB,iBAA8Cd,EAA9C,SACAU,EAAaG,MAAME,oBAAnB,iBAAiDf,EAAjD,SACA,IAAK,IAAIgB,EAAI,EAAGA,EAAIhB,EAAWA,EAAYgB,IAAK,CAC9C,IAAMC,EAAI,CAAC,GAAKD,EACR,WAAY,GAEpBP,EAASS,KAAKD,GAGfE,QAAQC,IAAIJ,GAIbX,EAAeI,GACjBU,QAAQC,IAAIhB,KAGV,CAACJ,IAKH,IA2BMqB,EAAO,WACXd,GAAW,GACXJ,EAAY,SACZ,IAAImB,EAAa,GACjBlB,EAAYmB,KAAI,SAACC,EAAKC,GAEpBD,EAAKE,WAAU,EACfJ,EAAaJ,KAAKM,MAGrBnB,EAAeiB,GAGd,IADA,IAAMK,EAAOhB,SAASC,uBAAuB,OACrCI,EAAE,EAAEA,EAAEW,EAAOC,OAAOZ,IAExBW,EAAOX,GAAGH,MAAMgB,gBAAgB,MAelCC,EAAU,SAAAL,GAAK,OAAE,SAAAM,GAGrBZ,QAAQC,IAAI,UAAYK,GAEzB,IAAIO,EAAM,YAAO5B,GAMlB,GALE4B,EAAOP,GAAOC,WAAW,EACzBP,QAAQC,IAAIY,EAAOP,IAEnBpB,EAAe2B,GACjBb,QAAQC,IAAIhB,GACE,UAAXF,EAAmB,CACpB,IAAM+B,EAAOF,EAAEE,OAKTC,EAAS,OAHNC,KAAKC,MAAqB,IAAdD,KAAKE,UAGI,IAFjBF,KAAKC,MAAqB,IAAdD,KAAKE,UAEc,IADhCF,KAAKC,MAAqB,IAAdD,KAAKE,UAC4B,IAEvDJ,EAAOpB,MAAMgB,gBAAgBK,KAM/B,OACE,sBAAKI,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,wBAAQA,UAAU,MAAMC,QArFjB,WAEX,IAAMC,EAAIC,OAAO,+EACdD,EAAI,KAAOA,EAAK,KAEnBvC,EAAcuC,GACdjC,GAAW,KA+EP,yBACA,wBAAQ+B,UAAU,MAAOC,QAvElB,WAMXlB,IACFlB,EAAY,SACVI,GAAW,IA+DP,mBACA,wBAAQ+B,UAAU,MAAOC,QAASlB,EAAlC,yBACA,wBAAQiB,UAAU,MAAOC,QA/ElB,WACXlB,IACAlB,EAAY,SACZI,GAAW,IA4EP,6BAEH,qBAAK+B,UAAU,YAAf,SAEClC,EAAYmB,KAAI,SAACC,EAAMC,GAErB,OAAQ,qBAAOiB,aAAcpC,EAASwB,EAAUL,GAAO,KAAMa,UAAYd,EAAKE,UAAL,eAAuBxB,GAAW,eAAoBsB,EAAKmB,aC/H5IC,IAASC,OAEL,cAAC,EAAD,IACFlC,SAASmC,eAAe,W","file":"static/js/main.42ba5aa2.chunk.js","sourcesContent":["import React, {useEffect,useState} from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [gridNumber,setGridNumber]=useState(16);\r\n  const [boxColor,setBoxColor]=useState(\"white\");\r\n  const [boxElements,addBoxElements]=useState([])//\r\n  const [noEvenet,setNoEvent]=useState(false);\r\n  //const [isClear,setIsClear]=useState([]);\r\n  useEffect(()=>{\r\n    addBoxElements([]);\r\n    setBoxColor(\"white\");\r\n    let elements=[];\r\n    let divContainer=document.getElementsByClassName(\"container\")[0];\r\n    divContainer.style.gridTemplateRows=`repeat(${gridNumber},1fr)`;\r\n    divContainer.style.gridTemplateColumns=`repeat(${gridNumber},1fr)`;\r\n    for (let i = 0; i < gridNumber*gridNumber; i++) {\r\n      const obj={\"id\":i,\r\n              \"isEntered\":false\r\n    }\r\n      elements.push(obj);\r\n     \r\n     \r\n     console.log(i);\r\n    \r\n    }\r\n    \r\n    addBoxElements(elements);\r\n  console.log(boxElements);\r\n  \r\n\r\n  },[gridNumber]);\r\n\r\n\r\n\r\n\r\n  const reset =()=>{\r\n   \r\n    const val=prompt(\"How many squares per side do you want?It must be minimum 16 and maximum 100\");\r\n    if(val>100 || val <16)\r\n    return;\r\n    setGridNumber(val);\r\n    setNoEvent(false);\r\n\r\n  }\r\n  const color =()=>{\r\n    clear();\r\n    setBoxColor(\"color\");\r\n    setNoEvent(true);\r\n  \r\n  }\r\n  const black =()=>{\r\n  /**  var element = document.getElementsByClassName(\"box\");\r\n    console.log(element);\r\n    for(let i =0;i<element.length;i++)\r\n    element[i].classList.add(\"black\"); */\r\n\r\n    clear();\r\n  setBoxColor(\"black\");\r\n    setNoEvent(true);\r\n   \r\n\r\n  }\r\n  const clear =()=>{\r\n    setNoEvent(false);\r\n    setBoxColor(\"white\");\r\n    let tempElements=[];\r\n    boxElements.map((data,index)=>{\r\n     \r\n      data.isEntered=false;\r\n      tempElements.push(data);\r\n\r\n    });\r\n   addBoxElements(tempElements);\r\n    \r\n    const divBox=document.getElementsByClassName(\"box\");\r\n    for(let i=0;i<divBox.length;i++){\r\n\r\n        divBox[i].style.backgroundColor=null;\r\n        \r\n    }\r\n\r\n   /**  \r\n    * var element = document.getElementsByClassName(\"box\");\r\n    * for(let i =0;i<element.length;i++)\r\n    {\r\n      element[i].classList.remove(\"black\");\r\n      element[i].classList.add(\"white\")\r\n\r\n    }*/\r\n    \r\n   \r\n  }\r\nconst changeBox=index=>e=>{\r\n\r\n\r\n  console.log('index: ' + index);\r\n\r\n let newArr = [...boxElements]; \r\n  newArr[index].isEntered =true; \r\n  console.log(newArr[index]);\r\n\r\n  addBoxElements(newArr); // ??//\r\nconsole.log(boxElements);\r\nif(boxColor===\"color\"){\r\n  const target=e.target;\r\n\r\n  var red= Math.floor((Math.random()*255));\r\n    var green= Math.floor((Math.random()*255));\r\n    var blue= Math.floor((Math.random()*255));\r\n    let newColor=\"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\r\n    \r\n    target.style.backgroundColor=newColor;\r\n\r\n}\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"divBtn\">\r\n        <button className=\"btn\" onClick={reset} >Reset Board</button>\r\n        <button className=\"btn\"  onClick={black} >Black</button>\r\n        <button className=\"btn\"  onClick={clear}>Clear Board</button>\r\n        <button className=\"btn\"  onClick={color}>Random Color</button>\r\n      </div>\r\n     <div className=\"container\">\r\n    \r\n     {boxElements.map((data, index) => {\r\n      \r\n        return (<div   onMouseEnter={noEvenet?changeBox(index):null} className={ data.isEntered?` box ${boxColor}`:\" white box \"} key={data.id}></div> ) \r\n      })}\r\n    \r\n       \r\n     </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  \r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}